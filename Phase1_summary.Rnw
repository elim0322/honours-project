\documentclass[a4paper]{article} 
    %\parindent=2em
    \parskip=1ex
    \usepackage{fancyvrb}    % frames around verbatim %
    \usepackage{listings}
        \lstset{
            basicstyle=\small\ttfamily,
            columns=flexible,
            breaklines=true
        }
    \usepackage{url}
    \usepackage{hyperref}
    \usepackage{tikz}
    \usetikzlibrary{shapes.geometric, arrows}

%%%%% flow chart configuration %%%%%
\tikzstyle{simple} = [rectangle, rounded corners, text width=3cm, text centered, draw=black, align=center]
\tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm, text centered, draw=black, fill=red!30]
\tikzstyle{process1} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, text width=3cm, draw=black, fill=orange!30]
\tikzstyle{process2} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, text width=3cm, draw=black, fill=blue!30]
\tikzstyle{decision} = [diamond, minimum width=2cm, minimum height=1cm, text centered, draw=black, fill=green!30]
\tikzstyle{arrow} = [thick,->,>=stealth]
\tikzstyle{line} = [thick,-,>=stealth]

\title{\textbf{Introduction to Knitr Round Trip: Phase 1 Summary}}
\author{Eric Lim}
\date{\today}

\begin{document}
  \maketitle
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%% Introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
The \textbf{knitr} package is a wonderful R package that enables interaction between various different types of documents and R. It allows us to embed R code as well as the results from R code into the different document types of one's choice. Through diverse settings, one can tailor the way R code is displayed in final documents according to specific needs, leading to a pleasantly structured, satisfactory document.

\begin{figure}[h!]
\centering
  \begin{tikzpicture}[node distance=3cm]
    \node(in)[simple]{Source document \\ (input)};
    \node(out)[simple, right of=in, xshift=2cm]{Final document \\ (output)};
    \draw[arrow](in)--node[anchor=south]{\textbf{knitr}}(out);
    \end{tikzpicture}
  \caption{Basic idea}  \label{fig:flow1}
\end{figure}

However, using this package is almost always a one-way trip (Figure \ref*{fig:flow1}), meaning source documents, containing R code to be displayed, generate final documents as output, not the other way around. In situations where a person who provides documents (using \textbf{knitr}) and another who reads or reviews the documents are involved, it is often difficult for the document provider to receive feedback from the reviewer and make appropriate changes. A good example of these situations would be when interaction between clients and consultatns is involved. Luckily, most R users are of professions that demand substantial amount of interaction with clients, such as statisticians.

Since it is impossible to go back from final documents to source documents (i.e. final documents cannot be used to generate source documents), the reviewer would have to provide his or her feedback by either writing physically on the printed version of the final documents or electronically. The document provider, then, has to retify the source documents accordingly, and repeat the process of generating and presenting final documents to the reviewer. There is high possibility that this process can be of multiple times and can become tedious, not to mention the task of editing itself, especially when the final documents are generated from several source documents.

Therefore, we want to be able to edit output documents directly as it is often the easier process. A possible solution is to allow reviewers (of the final documents) to interact directly with the final documents and be able to edit them. Then the document provider can revise and refine the edited documents as a final step. Time and resources, wasted otherwise, will be reduced significantly. To achieve the aforementioned solution, there must be a way to enable final documents to be converted to source documents. In other words, the one-way trip from source documents to final documents must incoporate another trip from the final to source documents.

Hence, the project we are working on has its main focus on making this ideal round trip possible, and if not what possible issues prevent this from happening. For a start, we deal with simple HTML documents in the hopes of finding a generalised approach for our goal.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%% Overview
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}

\begin{figure}[ht!]
\centering
  \begin{tikzpicture}[node distance=2cm]
    \node(start)[startstop]{untitled.Rhtml};
    \node(sew)[process1, below of=start]{untitled.post.Rhtml};
    \node(knit)[process1, below of=sew]{untitled.post.html};
    \node(snap)[process2, right of=knit, xshift=3cm]{untitled.edit.html};
    \node(anno)[process2, below of=snap]{untitled.anns.html};
    \node(chgs)[process2, below of=anno]{untitled.save.html};
    \node(rip)[startstop, left of=chgs, xshift=-3cm]{untitled.return.Rhtml};
    \node(repeat)[decision, left of=knit, xshift=-3cm]{Repeat};
    \draw[arrow](start)--node[anchor=west] {\texttt{sew()}} (sew);
    \draw[arrow](sew)--node[anchor=west] {\texttt{knit()}} (knit);
    \draw[arrow](knit)--node[anchor=south] {\texttt{snap()}} (snap);
    \draw[arrow](snap)--node[anchor=west] {\texttt{annotations()}} (anno);
    \draw[arrow](anno)--node[anchor=west]{\texttt{changes()}} (chgs);
    \draw[arrow](chgs)--node[anchor=south] {\texttt{rip()}} (rip);
    \draw[line, dashed](rip)-|(repeat);
    \draw[arrow, dashed](repeat)|-(start);
  \end{tikzpicture}
\caption{Hypothetical round trip}  \label{flow:2}
\end{figure}

For different types of source documents, \textbf{knitr} requires users to wrap chunks of R code inside comments whose syntax corresponds to the type of source documents.
<<>>=
library(knitr)
all_patterns$html
@

To illustrate how \textbf{knitr} works, a simple example of an HTML document can be considered. For different types of documents

\begin{Verbatim}[frame=single]
<html>
<body>
    <p>Here is a series from 1 to 10.</p>
    <!--begin.rcode
    1:100
    end.rcode-->
</body>
</html>
\end{Verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Functions}
A total of five functions are developed to carry out main tasks along with a few supplementary functions to support their roles.
\subsection{\texttt{sew()}}
Once a source document is knitted (using the \texttt{knit()} function), any R code chunks in the document are converted to a format to match the document type and be displayed. In this process, the original lines of R code are heavily modified (at least in HTML documents) to raise an alarm for possibility of a round trip.

To make a safe round trip, we need a way to preserve the original R code. The way the \textbf{knitr} package incorporates R codes into HTML documents is through exploitation with HTML comments. Lines of R code, to be displayed, are included in ordinary comment tags with addition of \texttt{begin.rcode} and \texttt{end.rcode} attached to the opening and end comment tags, respectively. This allows \texttt{knit()} to identify sections (or chunks) of R codes and converts them into an appropriate format of display. We can, in turn, use similar idea to preserve the original code in a way that \texttt{knit()} does not detect using these comment tags.

We have decided to use an algorithm in \texttt{sew()} that when a source document is passed through, a slightly modified copy of each R code chunk is created as a comment prior to being knitted \texttt{sew()}.

When \texttt{sew()} is called on an Rhtml document (HTML source document), a new document with a ``post.Rhtml" extention is created inside the user's current working directory (by default). In the new document, copies of the original R code chunks are generated and inserted after their corresponding originals. These copies are commented out with a keyword ``keep" as a marker, which is consistently used in later steps of the round trip. Then, \texttt{knit()} treats them as ordinary comments and they are excluded from display. Although these ``copies" are hidden from the display of output documents, one can easily gain access to them via text editors. Hence, it becomes possible that successive output documents retain the contents of the original R codes, even if the codes are altered for display.

A brief example may be considered to demonstrate \texttt{sew()}...
\begin{Verbatim}[frame=single]
<!DOCTYPE html>
<html>
  <head>
    <title>Example</title>
  </head>
  <body>
    <!--This is how an R code is displayed-->
    <p>Example:</p>
    <!--begin.rcode 
     1+1
    end.rcode-->
  </body>
</html>
\end{Verbatim}

The following code calls \texttt{sew()} on the above Rhtml document...
\begin{verbatim}
> source("sew.R")
> sew("Example.Rhtml")
\end{verbatim}

... and we observe the copied R code in the resulting post.Rhtml document...
\begin{Verbatim}[frame=single]
<!DOCTYPE html>
<html>
  <head>
    <title>Example</title>
  </head>
  <body>
    <!--This is how an R code is displayed-->
    <p>Example:</p>
    <!--begin.rcode 
     1+1
    end.rcode-->
    <!--begin.keepcode 
     1+1
    end.rcode-->
  </body>
</html>
\end{Verbatim}

This post.Rhtml document is, then, knitted using the following...
\begin{verbatim}
> library(knitr)
> knit("Example.post.Rhtml")
\end{verbatim}

... to produce a ``post.html" document as below...
\begin{lstlisting}[frame=single]
<!DOCTYPE html>
<html>
  <head>
<style type="text/css">
.knitr.inline {
    ...many lines of styles inserted by knitr...
}
</style>
    <title>Example</title>
  </head>
  <body>
    <!--This is how an R code is displayed-->
    <p>Example:</p>
<div class="chunk" id="unnamed-chunk-1"><div class="rcode"><div class="source"><pre class="knitr r"><span class="hl num">1</span> <span class="hl opt">+</span> <span class="hl num">1</span>
</pre></div>
<div class="output"><pre class="knitr r">## [1] 2
</pre></div>
</div></div>

    <!--begin.keepcode 
     1+1
    end.rcode-->
  </body>
</html>
\end{lstlisting}

We can observe that knitting introduces its own definition of a style in which R codes and their results are presented on the output document (inside \texttt{style} tags), and the original R codes are converted into \texttt{div} elements with the attribute, \texttt{class="chunk"}.

The ``copy" of the original R codes is still observable and remains untouched until the final step of the round trip.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{\texttt{snap()}}
Our primary goal is to edit the html document that \texttt{knit()} produces. Since the purpose of html documents lies in the presentation of information on a web browser, the most reasonable approach is to implement a document editor that works on web browsers. There is one restriction that all contents in output HTML documents are editable except R codes and their results. The primary reason for the restriction is that it is impossible to run R codes from the output documents, thus there is little benefit to be gained from this. In addition, possible ethical issues arising from post modification of R codes and their results, after the output documents are generated, can be avoided. Thus, \texttt{snap()} is developed to allow for all contents of output documents to be editable while R-related contents to be annotated.

To carry out the tasks mentioned above, \textbf{CKEditor} and \textbf{AnnotateIt} are selected as our tools. \textbf{CKEditor} is an open source HTML text editor that enables websites to be in an editable environment (like a document editor). And \textbf{AnnotateIt} provides ability to annotate on selected parts of website contents and save the annotations into the user's account (thus the user needs to be logged in their website \url{annotateit.org}. To further suit both resources to our specific need, a \textbf{JavaScript} function, \texttt{edit.js}, and a HTML document, \texttt{button.html}, are developed (by Paul).

Using the \textbf{XML} package and \texttt{Xpath}, which is a reliable way to deal with different sections of an HTML document, \texttt{snap()} identifies all the top level elements inside the body of an HTML document and insert a special marker for each of them (\texttt{contenteditable="true"} attributes in the opening tags of the top level elements), excluding R-related contents. Then, these markers are recognised by \textbf{CKEditor} and their corresponding contents become editable. Similarly, the elements associated with R contents are recognised by \textbf{AnnotateIt} to be available for annotation.

Once \texttt{snap()} is called upon a post.html document, a new document with the extention, ``edit.html" is created in the user's current working directory and is uploaded to a test server (\url{http://stat220.stat.auckland.ac.nz/cke/test}) using R packages called \textbf{httr} and \textbf{RCurl}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{\texttt{button.html}}
The HTML document, \texttt{button.html}, is a set of instructions to create ``submit" and ``save" buttons in an HTML environment.

\texttt{sew()} inserts it into the document upon which the function is called (post.html documents) so that the document contains the buttons.

\subsubsection{\texttt{edit.js}}
The main purpose of \texttt{edit.js} is to load two \textbf{JavaScript} functions, namely \texttt{ckeditor.js} and \texttt{annotator.js}, and a \textbf{JavaScript} library, \texttt{jquery.js}, from their respective web sources so their previously mentioned features are available on the output documents.

Additionally, \texttt{edit.js} contains information on how ``submit" and ``save" buttons operate. When the ``save" button is pressed, the information on any changes made on the output document, via \textbf{CKEditor}, is saved as \texttt{test\-changes.txt} on the test server, \url{http://stat220.stat.auckland.ac.nz/cke/test-changes.txt}. And changes through \textbf{AnnotateIt} are saved separately as \texttt{test-annotations.txt} on the test server, \url{http://stat220.stat.auckland.ac.nz/cke/test-annotations.txt}.


\end{document}
